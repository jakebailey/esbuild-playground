import fs from "node:fs";
import path from "node:path";
import url from "node:url";

import { execa } from "execa";
import fetch from "node-fetch";
import { Node, Project, VariableDeclarationKind } from "ts-morph";

const __filename = url.fileURLToPath(new URL(import.meta.url));
const __dirname = path.dirname(__filename);
const root = path.resolve(__dirname, "..");

const esbuildPackageJson = await fs.promises.readFile(
    path.resolve(root, "node_modules", "esbuild-wasm", "package.json"),
    { encoding: "utf8" },
);
const { version } = JSON.parse(esbuildPackageJson);

const licenseUrl = `https://raw.githubusercontent.com/evanw/esbuild/v${version}/LICENSE.md`;
const licenseResponse = await fetch(licenseUrl);

const licenseText = await licenseResponse.text();

const commonUrl = `https://raw.githubusercontent.com/evanw/esbuild/v${version}/lib/shared/common.ts`;
const commonResponse = await fetch(commonUrl);

const commonText = await commonResponse.text();

const contents = `
// Code generated by scripts/vendor-esbuild; DO NOT EDIT.
// ${commonUrl}

/* eslint-disable unicorn/no-abusive-eslint-disable */
/* eslint-disable */

/*!
${licenseText.trim()}
 */

${commonText.trim()}
`.trim().replace(/\r?\n/g, "\n").trim() + "\n";

const outFile = path.resolve(root, "src", "esbuild", "third_party", "common.ts");

const project = new Project({
    tsConfigFilePath: path.resolve(root, "tsconfig.json"),
    skipAddingFilesFromTsConfig: true,
});

const sourceFile = project.createSourceFile(outFile, contents, { overwrite: true });

sourceFile.getImportDeclarationOrThrow((d) => d.getModuleSpecifierValue() === "./types")
    .setModuleSpecifier("esbuild-wasm");

sourceFile.forEachChild((node) => {
    if (Node.isFunctionDeclaration(node) && node.getNameOrThrow() === "flagsForBuildOptions") {
        node.setIsExported(true);
        return;
    }

    if (Node.isExportable(node) && node.isExported()) {
        node.setIsExported(false);
    }
});

let lastWidth: number;
do {
    lastWidth = sourceFile.getFullWidth();
    sourceFile.fixUnusedIdentifiers();
} while (lastWidth !== sourceFile.getFullWidth());

sourceFile.addVariableStatement({
    isExported: true,
    declarationKind: VariableDeclarationKind.Const,
    declarations: [{
        name: "ESBUILD_VERSION",
        initializer: `"${version}"`,
    }],
});

await project.save();

await execa(path.resolve(root, "node_modules", ".bin", "dprint"), ["fmt", outFile]);
